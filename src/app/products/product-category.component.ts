import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { ReactiveFormsModule, FormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { MasterSideNavBarComponent } from '../master-side-nav-bar/master-side-nav-bar.component';
import { SideNavBarComponent } from '../side-nav-bar/side-nav-bar.component';
import { Location } from '@angular/common';
import { ProductService } from '../Services/product.service';
import { ProductCategoryViewModel, ProductTypeViewModel } from '../shared/order';

@Component({
  selector: 'app-product-category',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule, RouterLink, MasterSideNavBarComponent, SideNavBarComponent],
  templateUrl: './product-category.component.html',
  styleUrl: './product-category.component.css'
})
export class ProductCategoryComponent implements OnInit {
  productTypes: ProductTypeViewModel[] = [];
  prodCategory: ProductCategoryViewModel[] = [];
  filteredProdCategories: ProductCategoryViewModel[] = [];
  selectedprodCategory: any;
  prodCategoryForm: FormGroup;
  searchTerm: string = '';

  constructor(private productService: ProductService, private fb: FormBuilder, private location: Location, private router: Router) {
    this.prodCategoryForm = this.fb.group({
      category_Name: ['', Validators.required],
      product_Type_ID: [null, Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadProdCategories();
    this.loadProductTypes();
  }

  loadProductTypes(): void {
    this.productService.getProductTypes().subscribe({
      next: (types: ProductTypeViewModel[]) => {
        this.productTypes = types; // Assign fetched product types
      },
      error: (error) => {
        console.error('Error fetching product types', error);
      }
    });
  }

  getTypeNameById(typeId: number | undefined): string {
    if (typeId === undefined) {
      return 'Unknown Type'; // Return a fallback value if undefined
    }
    const type = this.productTypes.find(t => t.product_Type_ID === typeId);
    return type ? type.type_Name : 'Unknown Type'; // Fallback if not found
  }
  

  loadProdCategories(): void {
    this.productService.getAllProdCategories().subscribe((prodCategory: ProductCategoryViewModel[]) => {
      this.prodCategory = prodCategory;
      this.filteredProdCategories = prodCategory;
    });
  }

  filterProdCategories(): void {
    if (!this.searchTerm) {
      this.filteredProdCategories = this.prodCategory;
    } else {
      const term = this.searchTerm.toLowerCase();
      this.filteredProdCategories = this.prodCategory.filter(prodCategory =>
        prodCategory.category_Name.toLowerCase().includes(term) ||
        prodCategory.product_Category_ID.toString().includes(term)
      );
    }
  }

  openAddModal(): void {
    this.prodCategoryForm.reset();
    $('#addModal').modal('show');
  }

  openViewModal(prodCategory: ProductCategoryViewModel): void {
    this.selectedprodCategory = prodCategory;
    $('#viewModal').modal('show');
  }

  openEditModal(prodCategory: ProductCategoryViewModel): void {
    this.selectedprodCategory = prodCategory;
    this.prodCategoryForm.patchValue({
      category_Name: prodCategory.category_Name,
      product_Type_ID: prodCategory.product_Type_ID
    });
    $('#editModal').modal('show');
  }

  openDeleteModal(prodCategory: ProductCategoryViewModel): void {
    this.selectedprodCategory = prodCategory;
    $('#deleteModal').modal('show');
  }

  addProdCategory(): void {
    if (this.prodCategoryForm.valid) {
      const newprodCategory: ProductCategoryViewModel = {
        product_Category_ID: 0, // ID is auto-generated by the server
        category_Name: this.prodCategoryForm.value.category_Name,
        product_Type_ID: this.prodCategoryForm.value.product_Type_ID
      };
      this.productService.addProdCategory(newprodCategory).subscribe(() => {
        this.loadProdCategories();
        $('#addModal').modal('hide');
      });
    }
  }

  updateProdCategory(): void {
    if (this.prodCategoryForm.valid && this.selectedprodCategory) {
      const updatedCategory = {
        ...this.selectedprodCategory,
        ...this.prodCategoryForm.value // Include product_Type_ID
      };
  
      this.productService.updateProdCategory(updatedCategory.product_Category_ID, updatedCategory).subscribe({
        next: () => {
          this.loadProdCategories();
          $('#editModal').modal('hide');
        },
        error: (error) => {
          console.error(error);
          alert('Update failed');
        }
      });
    }
  }
  

  deleteProdCategory(): void {
    if (this.selectedprodCategory) {
      this.productService.deleteProdCategory(this.selectedprodCategory.product_Category_ID).subscribe(() => {
        this.loadProdCategories();
        $('#deleteModal').modal('hide');
      });
    }
  }

  goBack(): void {
    this.location.back();
  }
}
