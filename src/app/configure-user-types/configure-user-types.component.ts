import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { UserService } from '../Services/userprofile.service';
import { UserTypeViewModel } from '../shared/user-type-vm';
import { Router, RouterLink } from '@angular/router';
import { CommonModule, Location } from '@angular/common';
import { MasterSideNavBarComponent } from '../master-side-nav-bar/master-side-nav-bar.component';
import { SideNavBarComponent } from '../side-nav-bar/side-nav-bar.component';
declare var $: any; 

@Component({
  selector: 'app-configure-user-types',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule, RouterLink, MasterSideNavBarComponent, SideNavBarComponent],
  templateUrl: './configure-user-types.component.html',
  styleUrls: ['./configure-user-types.component.css']
})
export class ConfigureUserTypesComponent implements OnInit {
  userTypes: UserTypeViewModel[] = [];
  filteredUserTypes: UserTypeViewModel[] = [];
  selectedUserType: any;
  userTypeForm: FormGroup;
  searchTerm: string = '';

  constructor(private userTypeService: UserService, private fb: FormBuilder, private location: Location, private router: Router) {
    this.userTypeForm = this.fb.group({
      user_Type_Name: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadUserTypes();
  }

  loadUserTypes(): void {
    this.userTypeService.getAllUserTypes().subscribe((userTypes: UserTypeViewModel[]) => {
      this.userTypes = userTypes;
      this.filteredUserTypes = userTypes;
    });
  }

  filterUserTypes(): void {
    if (!this.searchTerm) {
      this.filteredUserTypes = this.userTypes;
    } else {
      const term = this.searchTerm.toLowerCase();
      this.filteredUserTypes = this.userTypes.filter(userType =>
        userType.user_Type_Name.toLowerCase().includes(term) ||
        userType.user_Type_ID.toString().includes(term)
      );
    }
  }

  openAddModal(): void {
    this.userTypeForm.reset();
    $('#addModal').modal('show');
  }

  openViewModal(userType: UserTypeViewModel): void {
    this.selectedUserType = userType;
    $('#viewModal').modal('show');
  }

  openEditModal(userType: UserTypeViewModel): void {
    this.selectedUserType = userType;
    this.userTypeForm.patchValue({
      user_Type_Name: userType.user_Type_Name
    });
    $('#editModal').modal('show');
  }

  openDeleteModal(userType: UserTypeViewModel): void {
    this.selectedUserType = userType;
    $('#deleteModal').modal('show');
  }

  addUserType(): void {
    if (this.userTypeForm.valid) {
      const newUserType: UserTypeViewModel = {
        user_Type_ID: 0, // ID is auto-generated by the server
        user_Type_Name: this.userTypeForm.value.user_Type_Name
      };
      this.userTypeService.addUserType(newUserType).subscribe(() => {
        this.loadUserTypes();
        $('#addModal').modal('hide');
      });
    }
  }

  updateUserType(): void {
    if (this.userTypeForm.valid && this.selectedUserType) {
      const userTypeName = this.userTypeForm.value.user_Type_Name;
      this.userTypeService.updateUserType(this.selectedUserType.user_Type_ID, userTypeName).subscribe({
        next: () => {
          this.loadUserTypes();
          $('#editModal').modal('hide');
        },
        error: (error) => {
          console.error(error);
          alert('Update failed');
        }
      });
    }
  }

  deleteUserType(): void {
    if (this.selectedUserType) {
      this.userTypeService.deleteUserType(this.selectedUserType.user_Type_ID).subscribe(() => {
        this.loadUserTypes();
        $('#deleteModal').modal('hide');
      });
    }
  }

  goBack(): void {
    this.location.back();
  }
}
